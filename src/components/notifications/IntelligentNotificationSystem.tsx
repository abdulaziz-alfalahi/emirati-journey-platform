
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Bell, 
  TrendingUp, 
  Target, 
  Calendar, 
  Award,
  AlertCircle,
  CheckCircle,
  Clock,
  Star,
  ArrowRight
} from 'lucide-react';
import { usePhase } from '@/context/PhaseContext';
import { useAuth } from '@/context/AuthContext';
import { formatDistanceToNow } from 'date-fns';

interface SmartNotification {
  id: string;
  type: 'opportunity' | 'deadline' | 'achievement' | 'recommendation' | 'phase_transition';
  title: string;
  message: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  phase: string;
  category: string;
  actionUrl?: string;
  actionText?: string;
  estimatedTime?: string;
  deadline?: string;
  relevanceScore: number;
  personalizedReason: string;
  relatedAchievements?: string[];
  nextSteps?: string[];
  createdAt: string;
}

export const IntelligentNotificationSystem: React.FC = () => {
  const { user } = useAuth();
  const { currentPhase, phaseInfo, phaseProgress } = usePhase();
  const [activeTab, setActiveTab] = useState('personalized');

  // Mock intelligent notifications - in real implementation, these would be generated by AI
  const smartNotifications: SmartNotification[] = [
    {
      id: '1',
      type: 'opportunity',
      title: 'AI & Machine Learning Scholarship Available',
      message: 'Based on your Computer Science background and career goals, this scholarship aligns perfectly with your interests.',
      priority: 'high',
      phase: 'education',
      category: 'scholarship',
      actionUrl: '/scholarships/ai-ml-scholarship',
      actionText: 'Apply Now',
      estimatedTime: '30 minutes',
      deadline: '2024-02-15',
      relevanceScore: 95,
      personalizedReason: 'Matches your Computer Science degree and stated interest in AI development',
      relatedAchievements: ['Academic Excellence in CS', 'Python Programming Certification'],
      nextSteps: [
        'Complete scholarship application form',
        'Submit academic transcripts',
        'Write personal statement about AI career goals'
      ],
      createdAt: '2024-01-15T10:00:00Z'
    },
    {
      id: '2',
      type: 'phase_transition',
      title: 'Ready for Career Entry Phase',
      message: 'You\'ve completed 85% of your education milestones. Consider transitioning to career-focused activities.',
      priority: 'medium',
      phase: 'career',
      category: 'phase_transition',
      actionUrl: '/career-planning-hub',
      actionText: 'Explore Career Options',
      estimatedTime: '45 minutes',
      relevanceScore: 88,
      personalizedReason: 'Your education progress indicates readiness for career preparation',
      nextSteps: [
        'Complete career assessment',
        'Update your resume',
        'Explore internship opportunities',
        'Connect with industry mentors'
      ],
      createdAt: '2024-01-14T15:30:00Z'
    },
    {
      id: '3',
      type: 'recommendation',
      title: 'Digital Marketing Certification Recommended',
      message: 'Enhance your business skills with this certification that complements your current expertise.',
      priority: 'medium',
      phase: 'professional',
      category: 'certification',
      actionUrl: '/professional-certifications',
      actionText: 'View Certification',
      estimatedTime: '6 weeks',
      relevanceScore: 82,
      personalizedReason: 'Aligns with your business development goals and current skill gaps',
      relatedAchievements: ['Business Fundamentals', 'Communication Skills'],
      nextSteps: [
        'Review certification curriculum',
        'Check prerequisite requirements',
        'Enroll in the program'
      ],
      createdAt: '2024-01-13T09:15:00Z'
    },
    {
      id: '4',
      type: 'deadline',
      title: 'Summer Internship Applications Due Soon',
      message: 'Don\'t miss out on summer internship opportunities. Applications close in 5 days.',
      priority: 'urgent',
      phase: 'career',
      category: 'internship',
      actionUrl: '/internships',
      actionText: 'Browse Internships',
      deadline: '2024-01-20',
      relevanceScore: 91,
      personalizedReason: 'Perfect timing based on your academic year and career interests',
      nextSteps: [
        'Browse available internships',
        'Prepare application materials',
        'Submit applications before deadline'
      ],
      createdAt: '2024-01-12T11:45:00Z'
    },
    {
      id: '5',
      type: 'achievement',
      title: 'Milestone Achievement Unlocked!',
      message: 'Congratulations! You\'ve completed your first professional certification.',
      priority: 'low',
      phase: 'professional',
      category: 'achievement',
      relevanceScore: 75,
      personalizedReason: 'Recognition of your recent certification completion',
      relatedAchievements: ['Project Management Certification'],
      nextSteps: [
        'Add certification to your portfolio',
        'Update LinkedIn profile',
        'Share achievement with your network'
      ],
      createdAt: '2024-01-11T16:20:00Z'
    }
  ];

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'urgent': return <AlertCircle className="h-4 w-4 text-red-600" />;
      case 'high': return <TrendingUp className="h-4 w-4 text-orange-600" />;
      case 'medium': return <Clock className="h-4 w-4 text-yellow-600" />;
      case 'low': return <CheckCircle className="h-4 w-4 text-green-600" />;
      default: return <Bell className="h-4 w-4 text-gray-600" />;
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'opportunity': return <Target className="h-5 w-5" />;
      case 'deadline': return <Calendar className="h-5 w-5" />;
      case 'achievement': return <Award className="h-5 w-5" />;
      case 'recommendation': return <Star className="h-5 w-5" />;
      case 'phase_transition': return <ArrowRight className="h-5 w-5" />;
      default: return <Bell className="h-5 w-5" />;
    }
  };

  const getPhaseColor = (phase: string) => {
    return phaseInfo[phase as keyof typeof phaseInfo]?.color || '#006E6D';
  };

  const filterNotificationsByTab = (tab: string) => {
    switch (tab) {
      case 'personalized':
        return smartNotifications.filter(n => n.relevanceScore >= 80);
      case 'opportunities':
        return smartNotifications.filter(n => n.type === 'opportunity');
      case 'deadlines':
        return smartNotifications.filter(n => n.type === 'deadline');
      case 'achievements':
        return smartNotifications.filter(n => n.type === 'achievement');
      case 'recommendations':
        return smartNotifications.filter(n => n.type === 'recommendation');
      default:
        return smartNotifications;
    }
  };

  const filteredNotifications = filterNotificationsByTab(activeTab);

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bell className="h-6 w-6" />
            Intelligent Notifications
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="personalized">For You</TabsTrigger>
              <TabsTrigger value="opportunities">Opportunities</TabsTrigger>
              <TabsTrigger value="deadlines">Deadlines</TabsTrigger>
              <TabsTrigger value="achievements">Achievements</TabsTrigger>
              <TabsTrigger value="recommendations">Recommended</TabsTrigger>
            </TabsList>

            <TabsContent value={activeTab} className="mt-6">
              <div className="space-y-4">
                {filteredNotifications.length === 0 ? (
                  <div className="text-center py-8">
                    <Bell className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-lg font-semibold mb-2">No notifications</h3>
                    <p className="text-gray-600">No notifications available for this category.</p>
                  </div>
                ) : (
                  filteredNotifications.map((notification) => (
                    <Card key={notification.id} className="border-l-4" style={{ borderLeftColor: getPhaseColor(notification.phase) }}>
                      <CardContent className="p-6">
                        <div className="flex items-start justify-between gap-4">
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-3">
                              {getTypeIcon(notification.type)}
                              <h3 className="font-semibold text-lg">{notification.title}</h3>
                              <Badge className={getPriorityColor(notification.priority)}>
                                <div className="flex items-center gap-1">
                                  {getPriorityIcon(notification.priority)}
                                  {notification.priority}
                                </div>
                              </Badge>
                              <Badge variant="outline" style={{ borderColor: getPhaseColor(notification.phase), color: getPhaseColor(notification.phase) }}>
                                {phaseInfo[notification.phase as keyof typeof phaseInfo]?.name}
                              </Badge>
                            </div>
                            
                            <p className="text-gray-700 mb-4">{notification.message}</p>
                            
                            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
                              <p className="text-sm font-medium text-blue-800 mb-1">Why this is relevant to you:</p>
                              <p className="text-sm text-blue-700">{notification.personalizedReason}</p>
                              <div className="flex items-center gap-2 mt-2">
                                <Star className="h-4 w-4 text-blue-600" />
                                <span className="text-sm font-medium text-blue-700">
                                  {notification.relevanceScore}% match
                                </span>
                                <Progress value={notification.relevanceScore} className="w-20 h-2" />
                              </div>
                            </div>

                            {notification.nextSteps && (
                              <div className="mb-4">
                                <h4 className="font-medium text-sm mb-2">Next Steps:</h4>
                                <ul className="text-sm text-gray-600 space-y-1">
                                  {notification.nextSteps.map((step, index) => (
                                    <li key={index} className="flex items-center gap-2">
                                      <div className="w-1 h-1 bg-gray-400 rounded-full"></div>
                                      {step}
                                    </li>
                                  ))}
                                </ul>
                              </div>
                            )}

                            <div className="flex items-center gap-4 text-sm text-gray-500">
                              <span>{formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })}</span>
                              {notification.estimatedTime && (
                                <>
                                  <span>•</span>
                                  <span>~{notification.estimatedTime}</span>
                                </>
                              )}
                              {notification.deadline && (
                                <>
                                  <span>•</span>
                                  <span className="text-red-600 font-medium">
                                    Due: {new Date(notification.deadline).toLocaleDateString()}
                                  </span>
                                </>
                              )}
                            </div>
                          </div>
                          
                          {notification.actionUrl && (
                            <Button className="shrink-0">
                              {notification.actionText || 'View Details'}
                              <ArrowRight className="h-4 w-4 ml-2" />
                            </Button>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))
                )}
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
};
